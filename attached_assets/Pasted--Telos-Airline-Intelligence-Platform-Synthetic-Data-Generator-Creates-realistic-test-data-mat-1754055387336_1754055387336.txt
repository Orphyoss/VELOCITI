-- Telos Airline Intelligence Platform - Synthetic Data Generator
-- Creates realistic test data matching EasyJet use cases and competitive scenarios

-- ============================================================================
-- REFERENCE DATA SETUP
-- ============================================================================

-- Insert Airlines
INSERT INTO airlines (airline_code, airline_name, carrier_type, country_code) VALUES
('EZY', 'EasyJet', 'LCC', 'GBR'),
('RYR', 'Ryanair', 'ULCC', 'IRL'),
('BA', 'British Airways', 'FSC', 'GBR'),
('VY', 'Vueling Airlines', 'LCC', 'ESP'),
('TUI', 'TUI Airways', 'LCC', 'GBR'),
('W6', 'Wizz Air', 'ULCC', 'HUN'),
('FR', 'Ryanair', 'ULCC', 'IRL'),
('U2', 'EasyJet Europe', 'LCC', 'AUT');

-- Insert Key European Airports
INSERT INTO airports (airport_code, airport_name, city_name, country_code, region) VALUES
('LGW', 'London Gatwick', 'London', 'GBR', 'Western Europe'),
('STN', 'London Stansted', 'London', 'GBR', 'Western Europe'),
('LTN', 'London Luton', 'London', 'GBR', 'Western Europe'),
('BCN', 'Barcelona El Prat', 'Barcelona', 'ESP', 'Western Europe'),
('MAD', 'Madrid Barajas', 'Madrid', 'ESP', 'Western Europe'),
('CDG', 'Paris Charles de Gaulle', 'Paris', 'FRA', 'Western Europe'),
('ORY', 'Paris Orly', 'Paris', 'FRA', 'Western Europe'),
('FCO', 'Rome Fiumicino', 'Rome', 'ITA', 'Western Europe'),
('MXP', 'Milan Malpensa', 'Milan', 'ITA', 'Western Europe'),
('AMS', 'Amsterdam Schiphol', 'Amsterdam', 'NLD', 'Western Europe'),
('BER', 'Berlin Brandenburg', 'Berlin', 'DEU', 'Western Europe'),
('VIE', 'Vienna International', 'Vienna', 'AUT', 'Western Europe'),
('ZUR', 'Zurich Airport', 'Zurich', 'CHE', 'Western Europe'),
('AGP', 'Malaga Airport', 'Malaga', 'ESP', 'Western Europe'),
('PMI', 'Palma de Mallorca', 'Palma', 'ESP', 'Western Europe');

-- Insert Routes (EasyJet focus)
INSERT INTO routes (route_id, origin_airport, destination_airport, market_type, distance_km, is_easyjet_route, route_priority) VALUES
('LGW-BCN', 'LGW', 'BCN', 'EU', 1146, TRUE, 'Core'),
('LGW-MAD', 'LGW', 'MAD', 'EU', 1263, TRUE, 'Core'),
('LGW-CDG', 'LGW', 'CDG', 'EU', 344, TRUE, 'Core'),
('LGW-FCO', 'LGW', 'FCO', 'EU', 1434, TRUE, 'Core'),
('LGW-AMS', 'LGW', 'AMS', 'EU', 358, TRUE, 'Core'),
('STN-BCN', 'STN', 'BCN', 'EU', 1172, FALSE, 'Competitive'),
('LTN-BCN', 'LTN', 'BCN', 'EU', 1154, FALSE, 'Competitive'),
('LGW-PMI', 'LGW', 'PMI', 'EU', 1239, TRUE, 'Seasonal'),
('LGW-AGP', 'LGW', 'AGP', 'EU', 1417, TRUE, 'Secondary'),
('BCN-ORY', 'BCN', 'ORY', 'EU', 831, TRUE, 'Core');

-- Insert Aircraft Types
INSERT INTO aircraft_types (aircraft_code, aircraft_name, typical_seats, aircraft_category) VALUES
('A319', 'Airbus A319', 156, 'Narrowbody'),
('A320', 'Airbus A320', 180, 'Narrowbody'),
('A321', 'Airbus A321', 232, 'Narrowbody'),
('B737', 'Boeing 737-800', 189, 'Narrowbody');

-- ============================================================================
-- SYNTHETIC COMPETITIVE PRICING DATA
-- ============================================================================

-- Generate competitive pricing data for the last 30 days
-- Simulating the pattern from your images: EasyJet vs Ryanair vs Others

WITH date_series AS (
  SELECT CURRENT_DATE - INTERVAL '1 day' * generate_series(0, 30) AS obs_date
),
flight_dates AS (
  SELECT CURRENT_DATE + INTERVAL '1 day' * generate_series(1, 90) AS flight_date
),
route_airline_combos AS (
  SELECT r.route_id, a.airline_code, a.carrier_type
  FROM routes r
  CROSS JOIN airlines a
  WHERE r.is_easyjet_route = TRUE 
    AND a.airline_code IN ('EZY', 'RYR', 'BA', 'VY', 'TUI')
)

INSERT INTO competitive_pricing (
  insert_date, observation_date, route_id, airline_code, 
  flight_date, flight_number, price_amount, price_currency, 
  fare_type, booking_class, availability_seats
)
SELECT 
  NOW() as insert_date,
  ds.obs_date,
  rac.route_id,
  rac.airline_code,
  fd.flight_date,
  rac.airline_code || LPAD((ABS(HASHTEXT(rac.route_id || rac.airline_code)) % 9999)::text, 4, '0') as flight_number,
  -- Pricing logic: EasyJet premium to Ryanair, seasonality, advance booking curves
  CASE 
    WHEN rac.airline_code = 'EZY' THEN 
      85 + (fd.flight_date - ds.obs_date) * -0.3 + RANDOM() * 40 +
      CASE WHEN EXTRACT(MONTH FROM fd.flight_date) IN (6,7,8) THEN 25 ELSE 0 END
    WHEN rac.airline_code = 'RYR' THEN 
      65 + (fd.flight_date - ds.obs_date) * -0.2 + RANDOM() * 35 +
      CASE WHEN EXTRACT(MONTH FROM fd.flight_date) IN (6,7,8) THEN 20 ELSE 0 END
    WHEN rac.airline_code = 'BA' THEN 
      145 + (fd.flight_date - ds.obs_date) * -0.4 + RANDOM() * 50 +
      CASE WHEN EXTRACT(MONTH FROM fd.flight_date) IN (6,7,8) THEN 35 ELSE 0 END
    ELSE 
      95 + (fd.flight_date - ds.obs_date) * -0.35 + RANDOM() * 45 +
      CASE WHEN EXTRACT(MONTH FROM fd.flight_date) IN (6,7,8) THEN 30 ELSE 0 END
  END AS price_amount,
  'EUR' as price_currency,
  'Basic' as fare_type,
  'Y' as booking_class,
  CASE 
    WHEN RANDOM() < 0.7 THEN (9 + RANDOM() * 6)::INTEGER 
    ELSE 0 
  END as availability_seats
FROM date_series ds
CROSS JOIN flight_dates fd
CROSS JOIN route_airline_combos rac
WHERE fd.flight_date > ds.obs_date 
  AND fd.flight_date <= ds.obs_date + INTERVAL '60 days'
  AND RANDOM() < 0.8; -- 80% data availability

-- ============================================================================
-- SYNTHETIC MARKET CAPACITY DATA  
-- ============================================================================

INSERT INTO market_capacity (
  insert_date, flight_date, route_id, airline_code, aircraft_type,
  flight_number, departure_time, num_flights, num_seats
)
WITH capacity_data AS (
  SELECT 
    r.route_id,
    a.airline_code,
    CURRENT_DATE + INTERVAL '1 day' * generate_series(1, 60) AS flight_date,
    CASE 
      WHEN a.airline_code = 'EZY' THEN 'A320'
      WHEN a.airline_code = 'RYR' THEN 'B737'  
      WHEN a.airline_code = 'BA' THEN 'A321'
      ELSE 'A319'
    END as aircraft_type,
    CASE 
      WHEN a.airline_code = 'EZY' AND r.route_priority = 'Core' THEN 2
      WHEN a.airline_code = 'RYR' THEN 3
      WHEN a.airline_code = 'BA' THEN 1
      ELSE 1
    END as daily_flights
  FROM routes r
  CROSS JOIN airlines a  
  WHERE r.is_easyjet_route = TRUE
    AND a.airline_code IN ('EZY', 'RYR', 'BA', 'VY')
)
SELECT 
  NOW() as insert_date,
  cd.flight_date,
  cd.route_id,
  cd.airline_code,
  cd.aircraft_type,
  cd.airline_code || LPAD((RANDOM() * 9999)::INTEGER::text, 4, '0') as flight_number,
  ('08:00'::TIME + (RANDOM() * INTERVAL '12 hours'))::TIME as departure_time,
  cd.daily_flights,
  CASE 
    WHEN cd.aircraft_type = 'A320' THEN 180
    WHEN cd.aircraft_type = 'B737' THEN 189  
    WHEN cd.aircraft_type = 'A321' THEN 232
    ELSE 156
  END as num_seats
FROM capacity_data cd;

-- ============================================================================
-- SYNTHETIC WEB SEARCH & DEMAND DATA
-- ============================================================================

INSERT INTO web_search_data (
  insert_date, search_date, route_id, data_source,
  search_volume, booking_volume, conversion_rate, avg_search_price, price_currency
)
SELECT 
  NOW() as insert_date,
  CURRENT_DATE - INTERVAL '1 day' * generate_series(0, 30) AS search_date,
  r.route_id,
  'Skyscanner' as data_source,
  -- Higher search volume for core routes, seasonal patterns
  CASE 
    WHEN r.route_priority = 'Core' THEN 800 + RANDOM() * 400
    WHEN r.route_priority = 'Seasonal' THEN 
      CASE WHEN EXTRACT(MONTH FROM CURRENT_DATE) IN (5,6,7,8,9) THEN 600 + RANDOM() * 300 
           ELSE 200 + RANDOM() * 150 END
    ELSE 300 + RANDOM() * 200
  END as search_volume,
  -- Booking conversion patterns  
  CASE 
    WHEN r.route_priority = 'Core' THEN (800 + RANDOM() * 400) * 0.12
    ELSE (300 + RANDOM() * 200) * 0.08  
  END::INTEGER as booking_volume,
  0.08 + RANDOM() * 0.05 as conversion_rate, -- 8-13% conversion
  85 + RANDOM() * 60 as avg_search_price, -- EUR 85-145 average search
  'EUR' as price_currency
FROM routes r
WHERE r.is_easyjet_route = TRUE;

-- ============================================================================
-- SYNTHETIC RM PRICING ACTIONS (EasyJet Internal)
-- ============================================================================

INSERT INTO rm_pricing_actions (
  insert_date, action_date, flight_date, route_id, flight_number,
  fare_class, action_type, old_price, new_price, price_currency,
  change_reason, change_source, distance_from_profile, booking_curve_position
)
WITH rm_actions AS (
  SELECT 
    r.route_id,
    CURRENT_DATE - INTERVAL '1 day' * generate_series(0, 7) AS action_date,
    CURRENT_DATE + INTERVAL '1 day' * generate_series(15, 45) AS flight_date
  FROM routes r 
  WHERE r.is_easyjet_route = TRUE
)
SELECT 
  NOW() as insert_date,
  ra.action_date,
  ra.flight_date,
  ra.route_id,
  'EZY' || LPAD((ABS(HASHTEXT(ra.route_id || ra.action_date::text)) % 9999)::text, 4, '0') as flight_number,
  CASE WHEN RANDOM() < 0.7 THEN 'Y' ELSE 'W' END as fare_class,
  CASE 
    WHEN RANDOM() < 0.4 THEN 'price_increase'
    WHEN RANDOM() < 0.7 THEN 'price_decrease'  
    ELSE 'inventory_adjust'
  END as action_type,
  80 + RANDOM() * 50 as old_price,
  CASE 
    WHEN RANDOM() < 0.4 THEN (80 + RANDOM() * 50) * 1.05 -- increase
    ELSE (80 + RANDOM() * 50) * 0.95 -- decrease
  END as new_price,
  'EUR' as price_currency,
  CASE 
    WHEN RANDOM() < 0.5 THEN 'system_auto'
    WHEN RANDOM() < 0.8 THEN 'competitor_response'
    ELSE 'analyst_manual'
  END as change_reason,
  CASE 
    WHEN RANDOM() < 0.6 THEN 'Elysium'
    WHEN RANDOM() < 0.9 THEN 'Segment_Finder'
    ELSE 'Manual'
  END as change_source,
  -0.15 + RANDOM() * 0.30 as distance_from_profile, -- -15% to +15%
  30 + RANDOM() * 40 as booking_curve_position -- 30-70 days out
FROM rm_actions ra
WHERE RANDOM() < 0.3; -- 30% of route/date combinations have actions

-- ============================================================================
-- SYNTHETIC FLIGHT PERFORMANCE DATA
-- ============================================================================

INSERT INTO flight_performance (
  insert_date, performance_date, flight_date, route_id, flight_number,
  aircraft_type, total_seats, bookings_count, load_factor, 
  revenue_total, revenue_currency, yield_per_pax, ancillary_revenue
)
SELECT 
  NOW() as insert_date,
  CURRENT_DATE - INTERVAL '1